#cloud-config
autoinstall:
  version: 1
  identity:
    hostname: harmonic-live
    username: ubuntu
    password: $6$canonical.$0zWaW71A9ke9ASsaOcFTdQ2tx1gSmLxMPrsH0rF0Yb.2AEKNPV1lrF94n6YuPJmnUy2K2/JSDtxuiBDey6Lpa/
  keyboard:
    layout: us
    variant: ""
  proxy: http://44.10.4.101:8000
  apt:
    geoip: true
    primary:
      - arches: [default]
        uri: http://us.archive.ubuntu.com/ubuntu/
  refresh-installer:
    channel: edge
    update: yes
  ssh:
    install-server: true
    allow-pw: true
    authorized-keys: []
  storage:
    grub:
      update_nvram: true
    swap:
      size: 0
    layout:
      name: direct
  package_update: false
  package_upgrade: false
  late-commands:
    - echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' > /target/etc/sudoers.d/ubuntu
    - sed -i -e '/^[#]*PermitRootLogin/s/^.*$/PermitRootLogin yes/' /target/etc/ssh/sshd_config
    - sed -i -e '/^[#]*PasswordAuthentication/s/^.*$/PasswordAuthentication yes/' /target/etc/ssh/sshd_config
    - systemctl restart ssh

  user-data:
    write_files:
      - path: /usr/local/bin/harmonic-installer.sh
        content: |
          #!/bin/bash
          ##############################################################################
          #
          #   harmonic-installer.sh
          #
          #   This script is executed either by 'harmonic-install.service' or by a
          #   user-provided 'cloud-init' configuration.
          #
          #   The harmonic-installer.sh script will then perform the following steps:
          #
          #   1. Download and install the ostree-production .deb packages from the
          #   MAAS webserver.
          #   2. Download the latest Apollo (Harmony cOS) .iso from the MAAS webserver.
          #   3. Create a /data directory and move the Apollo .iso into it.
          #   4. Run the 'ostree-production' commands to display and write the .iso
          #   to the system's physical disk (/dev/sda)
          #   5. Reboot the system to /dev/sda
          #
          #   The system will reboot into Harmony cOS
          #
          ##############################################################################

          # shellcheck disable=SC2312


          webserverHost="172.22.31.150"
          webserverPort="8080"
          apolloRelease="release-3.21.3.0-7+auto15"
          apolloISO="APOLLO_PLATFORM-${apolloRelease}.iso"
          ostreePackages="ostree-upgrade-bootstrap_2.0.41_all.deb ostree-upgrade_2.0.41_all.deb"
          # maasURI="http://maas.spoc.charterlab.com:5248/images"
          proxyURI="http://proxy4.spoc.charterlab.com:8080"
          proxyIgnore="localhost,127.0.0.1,127.0.0.53,spoc.charterlab.com,nfv.charterlab.com,proxy4.spoc.charterlab.com,44.10.4.101/32,44.10.4.200/32,172.22.0.0/16"
          localAssets="/media/root-rw"
          localData="/data"
          physicalDisk="/dev/sda"

          proxy=0
          download=0
          install=0
          unset http_proxy
          unset https_proxy
          unset no_proxy

          runPrint() {
          cat <<EOF
          ===========================================================
            $@
          ===========================================================
          EOF
          }

          showHelp() {
          cat << EOT
          Usage: $0 [-p -v] [-i] [-h]

          Image a physical server with Harmonic cOS

          -p|	  	(OPTIONAL) Enable the HTTP Proxy
                  Note: HTTP Proxy is disabled by default

          -v|	  	(OPTIONAL) Enable verbose and xtrace mode (set -xv)

          -i|     (REQUIRED FOR INSTALL) Install Apollo (Harmonic cOS) .iso located in "${localData}" using ostree scripts

          -h|     Display help

          EOT
          }

          proxySetup() {
            if [[ ${proxy} == 1 ]]; then


              : "${http_proxy:=${proxyURI}}"  && export http_proxy="${http_proxy}"
              : "${https_proxy:=${proxyURI}}" && export https_proxy="${https_proxy}"
              : "${no_proxy:=${proxyIgnore}}" && export no_proxy="${no_proxy}"

              echo "Using http_proxy:: ${http_proxy}"
              echo "Using https_proxy:: ${https_proxy}"
            fi
            return
          }

          ostreeSetup() {

            runPrint "Checking  to see if ostree-helper scripts are already present..."

            if [[ -z $(command -v ostree-production) ]]; then
              for thisPackage in ${ostreePackages}; do
                curl "http://${webserverHost}:${webserverPort}/packages/${thisPackage}" --output "${localAssets}/${thisPackage}" 2>&1
                dpkg -i "${localAssets}/${thisPackage}" 2>&1

              done
            fi

              mkdir "${localData}" \
              && curl "http://${webserverHost}:${webserverPort}/apollo/latest" --output "${localData}/${apolloISO}" 2>&1

            return
          }

          ostreeInstall() {

            ostree-production list-isos 2>&1
            ostree-production -D "${physicalDisk}" from "${localData}"/"${apolloISO}" 2>&1

            return
          }

          while getopts "hvpi" o; do
              case "${o}" in
                  h)
                      showHelp
                      exit 0
                      ;;
                  v)
                      set -xv
                      ;;
                  p)
                      proxy=1
                      ;;
                  i)
                      download=1
                      install=1
                      ;;
                  *)
                      showHelp
                      exit 1
                      ;;
              esac
          done
          shift $((OPTIND-1))


          if [[ ${proxy} == 1 ]]; then
          proxySetup
          fi

          if [[ "${download}" == 1 ]]; then
          ostreeSetup
          fi

          if [[ "${install}" == 1 ]]; then
          ostreeInstall
          fi
    bootcmd:
      - pwd
      - df -h
      - ls -alh /
      - ls -alh /root
      - ls -alh /target
      - ls -alh /media
      - ls -alh /usr/local/bin
      - ls -alh /etc/systemd/system
      - ls -alh /data
      - ls -alh /opt
      - ls -alh /tmp
      - chmod +x /usr/local/bin/harmonic-installer.sh
      - echo "----------------Harmonic Installer Starting-----------------"
      - /usr/local/bin/harmonic-installer.sh -i -v
      - echo "-------------------Harmonic Installer Ran-------------------"
    runcmd:
      - echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/ubuntu
      - sed -i -e '/^[#]*PermitRootLogin/s/^.*$/PermitRootLogin yes/' /etc/ssh/sshd_config
      - sed -i -e '/^[#]*PasswordAuthentication/s/^.*$/PasswordAuthentication yes/' /etc/ssh/sshd_config
      - systemctl restart ssh
